{"version":3,"sources":["Backend/BooksAPI.js","Components/Shelves/ShelfUpdate.js","Components/Book/Book.js","Components/Shelves/Shelves.js","Components/Main/Main.js","Components/Search/Search.js","Components/Main/Index.js","Components/App/App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","Accept","Authorization","getAll","fetch","then","res","json","data","books","UpdateShelf","props","book","shelf","setBooks","Books","useState","currentShelf","updateCurrentShelf","shelves","shelfname","title","defaultValue","onChange","e","newShelf","target","value","id","method","body","JSON","stringify","BooksAPI","Results","style","background","fontWeight","color","border","disabled","filter","map","undefined","Book","className","width","height","backgroundImage","imageLinks","thumbnail","split","join","ShelfUpdate","authors","length","ShelvesList","Shelf","useEffect","mounted","textDecoration","MainPage","to","SearchBar","matched","searchQuery","setSearchQuery","currentBooks","matchedBooks","BooksList","setBooksList","current","type","placeholder","query","maxResults","toLowerCase","trim","includes","margin","Index","App","path","element","index","Main","Search","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.abec5f34.chunk.js","sourcesContent":["const api = \"https://reactnd-books-api.udacity.com\";\r\n\r\nlet token = localStorage.token;\r\n\r\nif (!token) token = localStorage.token = Math.random().toString(36).substr(-8);\r\n\r\nconst headers = {\r\n  Accept: \"application/json\",\r\n  Authorization: token,\r\n};\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then((res) => res.json())\r\n    .then((data) => data.book);\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then((res) => res.json())\r\n    .then((data) => data.books);\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      ...headers,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ shelf }),\r\n  }).then((res) => res.json());\r\n\r\nexport const search = (query, maxResults) =>\r\n  fetch(`${api}/search`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      ...headers,\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ query, maxResults }),\r\n  })\r\n    .then((res) => res.json())\r\n    .then((data) => data.books);\r\n","import { useState } from \"react\";\r\nimport * as BooksAPI from '../../Backend/BooksAPI'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst UpdateShelf = (props) => {\r\n    const {book,shelf,setBooks,Books} = props\r\n    const [currentShelf, updateCurrentShelf] = useState(shelf)\r\n    const shelves = [\r\n        { shelfname: \"currentlyReading\", title : \"Currently Reading\" },\r\n        { shelfname: \"wantToRead\", title : \"Want to Read\" },\r\n        { shelfname: \"read\", title: \"Read\" },\r\n        { shelfname: \"none\", title:\"None\"}\r\n    ]\r\n    const handleShelfUpdate = (e) => {\r\n        const newShelf = e.target.value\r\n        updateCurrentShelf(newShelf)\r\n        BooksAPI.update(book,newShelf)\r\n        BooksAPI.getAll().then((Results) => {\r\n            if(Books !== Results){\r\n                setBooks(Results)\r\n            }\r\n        }\r\n        )\r\n    \r\n    }\r\n\r\n    return(\r\n        <select defaultValue={currentShelf} onChange={handleShelfUpdate}>\r\n            <option style={{background:\"orange\",fontWeight:\"bold\",color:\"white\",border:\"2px solid red\"}} value={book.shelf} disabled>\r\n            Move from [ {shelves.filter(({shelfname}) => shelfname === currentShelf).map(({title}) => { return( title ) })} ]\r\n            </option>\r\n            {\r\n                shelf !== undefined\r\n                ? shelves.filter(({shelfname}) => shelfname !== shelf)\r\n                .map(({shelfname,title}) => {\r\n                    return (\r\n                        <option key={shelfname} value={shelfname}>{title}</option>\r\n                    )\r\n                })\r\n                : shelves.filter(({shelfname}) => shelfname !== \"none\")\r\n                .map(({shelfname,title}) => {\r\n                    return (\r\n                        <option key={shelfname} value={shelfname}>{title}</option>\r\n                    )\r\n                })\r\n                \r\n            }\r\n        </select>\r\n    )\r\n}\r\nUpdateShelf.propTypes = {\r\n    onBooksUpdate: PropTypes.func,\r\n    book: PropTypes.object,\r\n    shelf: PropTypes.string\r\n}\r\n\r\nexport default UpdateShelf;","import ShelfUpdate from '../Shelves/ShelfUpdate'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Book = (props) => {\r\n    const {book,shelf, setBooks,Books} = props\r\n    \r\n    return(\r\n        <li className={`listedBook`} key={book.id}>\r\n            <span className=\"tooltip-text\">{book.title}</span>\r\n            <div className=\"book\">\r\n                <div className=\"book-top\">\r\n                    <div\r\n                    className=\"book-cover\"\r\n                    style={{\r\n                        width: \"100%\",\r\n                        height:193,\r\n                        backgroundImage:\r\n                        book.imageLinks ? `url(${ book.imageLinks.thumbnail })`: `url(https://dummyimage.com/128x193/ff4000/fcfc7e.png&text=${book.title.split(' ').join('+')})`,\r\n                    }}\r\n                    ></div>\r\n                    <div className=\"book-shelf-changer\">\r\n                        <ShelfUpdate \r\n                            key={book.id} \r\n                            book={book} \r\n                            shelf={shelf} \r\n                            setBooks={() => setBooks}\r\n                            Books={Books}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"book-authors\">\r\n                    {\r\n                        book.authors && book.authors.length > 0\r\n                        ? <div className=\"author-name\" key={ book.title + book.authors[0] } >{ book.authors[book.authors.length-1] }</div>\r\n                        : <div className=\"author-name\" key={ book.title + \"unknown\" } >{ \"unknown\" }</div>\r\n                    }\r\n                    \r\n                </div>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\nBook.propTypes = {\r\n    onBooksUpdate: PropTypes.func,\r\n    book: PropTypes.object,\r\n    shelf: PropTypes.string\r\n}\r\nexport default Book;","import { useEffect, useState } from \"react\";\r\nimport Book from \"../Book/Book\";\r\nimport * as BooksAPI from '../../Backend/BooksAPI'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst ShelvesList = (props) => {\r\n    const {Shelf} = props\r\n    const shelves = [\r\n        { shelfname: \"currentlyReading\", title : \"Currently Reading\" },\r\n        { shelfname: \"wantToRead\", title : \"Want to Read\" },\r\n        { shelfname: \"read\", title: \"Read\" },\r\n        { shelfname: \"none\", title:\"None\"}\r\n    ]\r\n    const [Books, setBooks] = useState([])\r\n\r\n    useEffect(() => {\r\n        let mounted = true;\r\n        BooksAPI.getAll()\r\n        .then((books) => {\r\n            if(mounted){\r\n                if(books !== Books){\r\n                    setBooks(books)\r\n                }\r\n            }\r\n        })\r\n        return () => mounted = false\r\n    }, [Books])\r\n    \r\n    \r\n    return (\r\n        <div className=\"bookshelf\" key={Shelf}>\r\n            <h2 className=\"bookshelf-title\">{shelves.filter(({shelfname}) => shelfname === Shelf).map((shelf) => {return (shelf.title)})}</h2>\r\n            <div className=\"bookshelf-books\">\r\n                <ol className=\"books-grid\">\r\n                    {\r\n                        Books.filter(({shelf}) => shelf === Shelf).length > 0\r\n                        ? Books.filter(({shelf}) => shelf === Shelf).map((book) => <Book key={book.id} book={book} shelf={book.shelf} Books={Books} setBooks={setBooks} />)\r\n                        : <h3><span style={{color:\"red\",textDecoration:\"underline\"}}>{Books.filter(({shelf}) => shelf === Shelf).length}</span> Books found in this shelf.</h3>\r\n                    }\r\n                </ol>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nShelvesList.propTypes = {\r\n    setBooks: PropTypes.func,\r\n    Shelf: PropTypes.string.isRequired,\r\n    book: PropTypes.objectOf(PropTypes.object),\r\n}\r\nexport default ShelvesList;","import { Link } from \"react-router-dom\";\r\nimport ShelvesList from \"../Shelves/Shelves\";\r\n\r\nconst MainPage = () => {\r\n  const Shelves = [\r\n    \"currentlyReading\",\r\n    \"wantToRead\",\r\n    \"read\"\r\n  ]\r\n    return (\r\n        <div className=\"list-books\">\r\n          <div className=\"list-books-title\">\r\n            <h1>MyReads</h1>\r\n          </div>\r\n          <div className=\"list-books-content\">\r\n            <div>\r\n              {Shelves.map((Shelf) => <ShelvesList key={Shelf} Shelf={Shelf} />)}\r\n            </div>\r\n          </div>\r\n          <div className=\"open-search\">\r\n            <Link to={`/search/`}>Add a book</Link>\r\n          </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainPage;","import React, {useEffect,useState} from \"react\";\r\nimport * as BooksAPI from '../../Backend/BooksAPI'\r\nimport Book from \"../Book/Book\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nconst SearchBar = () => {\r\n  \r\n  const [searchQuery, setSearchQuery] = useState('')\r\n  const [BooksList, setBooksList] = useState([\r\n    {\r\n      currentBooks: []\r\n    ,\r\n      matchedBooks: []\r\n    }\r\n  ])\r\n  useEffect(() => {\r\n    if(BooksList.currentBooks && BooksList.currentBooks.length<= 0){\r\n    BooksAPI.getAll()\r\n    .then((current) => {\r\n      setBooksList({...BooksList, currentBooks: [current]})\r\n    })}\r\n  },[BooksList])\r\n  let matched;\r\n\r\n  const SearchQuery = (e) => {\r\n      setSearchQuery(e.target.value.toLowerCase().toString())\r\n      if(searchQuery && e.target.value !== \"\"){\r\n        BooksAPI.search(searchQuery.toLowerCase().toString().trim(), 30)\r\n        .then(books => {\r\n          books.length > 0 ? matched = books.filter((book) => book.title.toLowerCase().includes(searchQuery)) : matched = []\r\n\r\n          matched.length > 0 ? setBooksList({...BooksList, matchedBooks: matched}) : setBooksList({...BooksList, matchedBooks: []})\r\n        })\r\n    } else {\r\n        setBooksList([])\r\n    }\r\n  }\r\n  \r\n  return (\r\n      <div className=\"search-books\">\r\n        <div className=\"search-books-bar\">\r\n          <Link to={`/`}\r\n            className=\"close-search\"\r\n          >\r\n            Close\r\n          </Link>\r\n          <div className=\"search-books-input-wrapper\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Type Book name here\"\r\n              value={searchQuery}\r\n              onChange={SearchQuery}\r\n              \r\n            />\r\n          </div>\r\n        </div>\r\n        {searchQuery.length > 0 && BooksList.matchedBooks ? <div className=\"searchbar-tip\"><span style={{color: BooksList.matchedBooks.length>0 ? \"green\": \"maroon\",textDecoration:\"underline\",margin:\"0px 5px\",}}>{BooksList.matchedBooks.length} </span> Books has been found.</div>: <></>}\r\n        <div className=\"search-books-results\">\r\n          <ol className=\"books-grid\">\r\n              { BooksList.matchedBooks && BooksList.matchedBooks.length > 0 ? \r\n                  BooksList.matchedBooks.map((book) =>\r\n                  <Book key={book.id} book={book} shelf={book.shelf} />) : <></>}\r\n          </ol>\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default SearchBar;","import \"../../Utilities/Styles/App.css\";\r\nimport { Outlet} from \"react-router-dom\";\r\n\r\nconst Index = () => {\r\n    return (\r\n        <Outlet />\r\n    )\r\n\r\n}\r\n\r\nexport default Index","import  {BrowserRouter as Router, Route, Routes} from \"react-router-dom\"\r\nimport MainPage from \"../Main/Main\";\r\nimport SearchBar from \"../Search/Search\";\r\nimport Index from \"../Main/Index\";\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        <Route path=\"/\" element={<Index />}>\r\n          <Route index element={<MainPage />} />\r\n          <Route path=\"/search\" element={<SearchBar />} />\r\n        </Route>\r\n      </Routes>\r\n    </Router>\r\n    \r\n  );\r\n}\r\nexport default App;\r\n","import React  from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./Utilities/Styles/index.css\";\r\nimport App from \"./Components/App/App\";\r\n\r\n\r\nReactDOM.render(\r\n    <App />\r\n  ,\r\n  document.getElementById(\"root\")\r\n);"],"sourceRoot":""}